# Bike Sharing Management System

## Project Overview

This project is a **relational database system** I developed to manage a city-wide **Bike Sharing Service**. It models and supports core operations such as bike rentals, customer tracking, station logistics, fee calculation, and maintenance history.

The schema is implemented using **SQL DDL**, and I populated it with mock data using `DataInsertion.sql` to simulate realistic business scenarios.

## Database Schema

The system includes the following key entities:

- **STATIONS**: Stores bike station details like name, location, and capacity.
- **BIKES**: Contains data about each bike including model, status, station location, and purchase date.
- **CUSTOMERS**: Holds customer information including names and contact details.
- **TRIPS**: Tracks all bike rentals—start and end times, associated customer, bike, and stations.
- **MAINTENANCE**: Records maintenance tasks performed on bikes, including the operator and description.
- **MAINTENANCE_LOG**: Maintains logs of maintenance activities with timestamps for better traceability.
- **CARD**: Stores simplified card information linked to customers.
- **FEES**: Contains hourly rental fees and their dates of implementation.
- **TRIP_FEE_MAPPING**: Links each trip to its corresponding fee record.

## Setup Instructions

1. **Create the Tables**  
   Run the `ProjectV2.ddl` script to create all tables and apply constraints.

2. **Insert Sample Data**  
   Execute the `DataInsertion.sql` file to insert mock data into the database. It includes:
   - 5 Stations
   - 4 Bikes
   - 5 Customers
   - 5 Trips
   - Maintenance records and logs
   - Multiple fee records
   - Card information
   - Trip-fee mappings

3. **Important Notes**  
   I’ve disabled parallel DML at the beginning of the script for safer bulk operations.  
   For the maintenance log section, make sure server output is enabled to view the `DBMS_OUTPUT.PUT_LINE` messages.

## Sample Use Cases

- **Check bike availability** by querying the `BIKES` table where `status = 'Available'`.
- **View customer trip history** using a join between `TRIPS` and `CUSTOMERS`.
- **Audit past maintenance** with data from `MAINTENANCE_LOG`.
- **Calculate trip cost** by joining `TRIP_FEE_MAPPING` and `FEES`.
- **Update bike status or location** after a trip using standard `UPDATE` queries.

## Security Note

To keep the focus on database structure, I’ve stored card numbers and SSNs as plain text in this mock version. In production, this data should always be encrypted, masked, or tokenized for security and compliance.

## Technologies Used

- SQL (DDL and DML)
- Oracle DBMS (compatible with other SQL-based systems)

## Files Included

- `ProjectV2.ddl` – Schema definitions
- `DataInsertion.sql` – Sample data insertion script

## Notes from Me

I built this project as part of a hands-on exercise in database design and logic. It can be expanded further by adding:

- A `USERS` table for login/authentication
- Real-time dashboards or reporting layers
- Trigger-based fee calculation
- Integration with a web or mobile frontend

Feel free to use this project as a foundation or reference. Let me know if you'd like help extending or customizing it further.
